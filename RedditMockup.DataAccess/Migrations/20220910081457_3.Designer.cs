// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RedditMockup.DataAccess.Context;

#nullable disable

namespace RedditMockup.DataAccess.Migrations
{
    [DbContext(typeof(RedditMockupContext))]
    [Migration("20220910081457_3")]
    partial class _3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RedditMockup.Model.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(2430),
                            Description = "tqirnrastseqiocnsoemisrmhdapie",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(2430),
                            QuestionId = 1,
                            Title = "inosefaa",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(3332),
                            Description = "qsiiauiuteeotouuteliutgerqneen",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(3332),
                            QuestionId = 1,
                            Title = "silnafem",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(3676),
                            Description = "iaquterntmtutuqsmshdutttliqmeo",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(3676),
                            QuestionId = 1,
                            Title = "atufeiui",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(4001),
                            Description = "qtuderegeeieitnsueqeecosetmecs",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(4001),
                            QuestionId = 1,
                            Title = "siamitle",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(4318),
                            Description = "qnntueeifduluuuisavaienuueltsl",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(4318),
                            QuestionId = 1,
                            Title = "epltueol",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(4647),
                            Description = "qmuueidtiueelattinosnaulqmiate",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(4647),
                            QuestionId = 1,
                            Title = "nuvesett",
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(4955),
                            Description = "tteetooageveeaaauoalaimeapucom",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(4955),
                            QuestionId = 1,
                            Title = "hadhlmtn",
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(5255),
                            Description = "rsunsluqoenpneqtseonmreamcrasa",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(5255),
                            QuestionId = 1,
                            Title = "mansaoia",
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(5562),
                            Description = "exsidoaeniirgonueooeetsnamntmi",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(5562),
                            QuestionId = 1,
                            Title = "eiolatlm",
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(5884),
                            Description = "mtneauostiauqxsaciiosqtnnabpve",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 523, DateTimeKind.Local).AddTicks(5884),
                            QuestionId = 1,
                            Title = "sitmaini",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.AnswerVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Kind")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.ToTable("AnswerVotes");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3440),
                            Family = "Foroughi Rad",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3440),
                            Name = "Sepehr"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3447),
                            Family = "BooAzaar",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3447),
                            Name = "Abbas"
                        });
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "",
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3902),
                            Email = "",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3902),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Bio = "",
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3907),
                            Email = "",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3907),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 519, DateTimeKind.Local).AddTicks(9866),
                            Description = "ebfruvunaaourimuidtiouituaaidi",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 519, DateTimeKind.Local).AddTicks(9866),
                            Title = "eeedaeit",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(772),
                            Description = "oirsuuitlaeopgustasnaleutcfnet",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(772),
                            Title = "vmsmeeln",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(1149),
                            Description = "sidiemionttiicueeaeoiaieunusqr",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(1149),
                            Title = "ttuetaix",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(1500),
                            Description = "ilqeaunfooootaaircnsacrestusxe",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(1500),
                            Title = "isutrvte",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(1824),
                            Description = "ieexaaauuviecicneirabspsiideie",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(1824),
                            Title = "casmmtqe",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(2144),
                            Description = "amdiclstmicaeaaiunqeuseuittade",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(2144),
                            Title = "nsseqate",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(2481),
                            Description = "souqlcvtpeiieieeqapinpvnpoibus",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(2481),
                            Title = "rcemibfu",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(2796),
                            Description = "urcivnoeturrretitesstutdqtgrmm",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(2796),
                            Title = "uooattab",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(3111),
                            Description = "ciuouinuatuallenosoatbuiesovur",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(3111),
                            Title = "lodilimd",
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(3436),
                            Description = "rtmbtpmiqtomgslcpeeiiovlmsniit",
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 520, DateTimeKind.Local).AddTicks(3436),
                            Title = "seoirtxv",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.QuestionVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Kind")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionVote");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3372),
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3372),
                            Title = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3413),
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3413),
                            Title = "User"
                        });
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3467),
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3467),
                            Password = "7f13d2c6d8191aaec19c5bb484deb750d7c79ce6d546815acbde63cbd857053310492804a674a16bfb18550e3e16df3c4bbd9801288e735057eb5010caa37ab8",
                            PersonId = 1,
                            Score = 0,
                            Username = "sepehr_frd"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3815),
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3815),
                            Password = "7cabe918dbd1e1ddbf57e0c17c636f6ce8153bbbd7c460edc774b09dfde1e42fa63501e088c6df3bb630fba5e92781aa0997aca1d2a4aee63c93348bf61f2576",
                            PersonId = 2,
                            Score = 0,
                            Username = "abbas_booazaar"
                        });
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3979),
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3979),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3984),
                            LastUpdated = new DateTime(2022, 9, 10, 12, 44, 56, 516, DateTimeKind.Local).AddTicks(3984),
                            RoleId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.Answer", b =>
                {
                    b.HasOne("RedditMockup.Model.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedditMockup.Model.Entities.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.AnswerVote", b =>
                {
                    b.HasOne("RedditMockup.Model.Entities.Answer", "Answer")
                        .WithMany("AnswerVotes")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.Profile", b =>
                {
                    b.HasOne("RedditMockup.Model.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("RedditMockup.Model.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.Question", b =>
                {
                    b.HasOne("RedditMockup.Model.Entities.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.QuestionVote", b =>
                {
                    b.HasOne("RedditMockup.Model.Entities.Question", "Question")
                        .WithMany("AnswerVotes")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.User", b =>
                {
                    b.HasOne("RedditMockup.Model.Entities.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("RedditMockup.Model.Entities.User", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.UserRole", b =>
                {
                    b.HasOne("RedditMockup.Model.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedditMockup.Model.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.Answer", b =>
                {
                    b.Navigation("AnswerVotes");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.Person", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("AnswerVotes");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RedditMockup.Model.Entities.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Profile");

                    b.Navigation("Questions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
